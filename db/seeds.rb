# frozen_string_literal: true

Progress.destroy_all
VideoProgress.destroy_all
Video.destroy_all
Upload.destroy_all
QuizQuestion.destroy_all
QuizAttempt.destroy_all
Question.destroy_all
Quiz.destroy_all
Lesson.destroy_all
Chapter.destroy_all
Enrollment.destroy_all
CourseCategory.destroy_all
Course.destroy_all
Category.destroy_all
Role.destroy_all
User.destroy_all

%w[
  progresses video_progresses videos uploads quiz_questions quiz_attempts
  questions quizzes lessons chapters enrollments course_categories
  courses categories users_roles roles users
].each do |table_name|
  ActiveRecord::Base.connection.reset_pk_sequence!(table_name)
end

puts 'Creating admin student and instructor...'

admin = begin
  user = User.new(
    email: 'trongdn2405@gmail.com', password: 'Admin123@',
    name: 'Admin User', phone: '1234567890', address: 'Admin Address',
    bio: 'This is an admin user', date_of_birth: '1985-05-10'
  )
  user.skip_confirmation!
  user.confirm
  user.save
  user
end

instructor = begin
  user = User.new(
    email: 'trongtk24052003@gmail.com', password: 'Admin123@',
    name: 'Instructor User', phone: '0987654321', address: 'Instructor Address',
    bio: 'This is an instructor user', date_of_birth: '1990-07-15'
  )
  user.skip_confirmation!
  user.confirm
  user.save
  user
end

admin_role = Role.create!(name: 'admin')
instructor_role = Role.create!(name: 'instructor')
student_role = Role.create!(name: 'student')

admin.roles << admin_role
instructor.roles << instructor_role

5.times do |i|
  user = User.new(
    email: "instructor#{i}@gmail.com",
    password: 'Admin123@',
    name: "Instructor #{rand(1..100)}",
    phone: "098#{rand(1_000_000..9_999_999)}",
    address: "Address #{rand(1..100)}",
    bio: "Professional instructor with #{rand(2..10)} years of experience",
    date_of_birth: (Date.today - rand(25..45).years).strftime('%Y-%m-%d')
  )
  user.skip_confirmation!
  user.confirm
  user.save
  user.roles << instructor_role
end

10.times do |i|
  user = User.new(
    email: "student#{i}@gmail.com",
    password: 'Admin123@',
    name: "Student #{rand(1..100)}",
    phone: "09#{rand(10_000_000..99_999_999)}",
    address: "Address #{rand(1..100)}",
    bio: 'Enthusiastic learner interested in various subjects',
    date_of_birth: (Date.today - rand(18..30).years).strftime('%Y-%m-%d')
  )
  user.skip_confirmation!
  user.confirm
  user.save
  user.roles << student_role
end

puts '‚úÖ Created users.'
puts '‚úÖ Assigned roles.'

category1 = Category.create!(name: 'Programming', description: 'All about programming languages.')
category2 = Category.create!(name: 'Design', description: 'Design and creative skills.')
category3 = Category.create!(name: 'Business', description: 'Business and management skills.')
category4 = Category.create!(name: 'Data Analysis', description: 'Data analysis and visualization.')
puts '‚úÖ Created categories.'

def fetch_transcription_text(json_url)
  uri = URI.parse(json_url)
  bucket = uri.host.split('.').first
  key = uri.path.sub(/^\//, '')

  s3_conf = YAML.safe_load(ERB.new(File.read(Rails.root.join('config/storage.yml'))).result)['amazon']

  s3 = Aws::S3::Client.new(
    region: s3_conf['region'],
    access_key_id: Rails.application.credentials.dig(:aws, :access_key_id),
    secret_access_key: Rails.application.credentials.dig(:aws, :secret_access_key)
  )

  s3.head_object(bucket: bucket, key: key)
  body = s3.get_object(bucket: bucket, key: key).body.read
  data = JSON.parse(body)
  data.dig('results', 'transcripts', 0, 'transcript') || 'Kh√¥ng c√≥ n·ªôi dung transcript'

rescue => e
  "Kh√¥ng th·ªÉ ƒë·ªçc transcript: #{e.message}"
end

puts 'Creating uploads...'

uploads = [         
  Upload.create!(
    id: '0a9126af-f394-42c5-acff-e7bd0e1da25c',
    file_type: 'mp4',
    cdn_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/0a9126af-f394-42c5-acff-e7bd0e1da25c/hls/master.m3u8',
    thumbnail_path: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/0a9126af-f394-42c5-acff-e7bd0e1da25c/thumbnail.jpg',
    duration: 34,
    status: 'success',
    user_id: instructor.id,
    created_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    updated_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    formats: %w[mp4 hls],
    progress: 100,
    transcription: fetch_transcription_text('https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/0a9126af-f394-42c5-acff-e7bd0e1da25c/transcription/transcript.json'),
    transcription_status: 'completed',
    processing_log: 'V·∫Ω tranh t·∫∑ng Crush si√™u ƒë∆°n gi·∫£n- L√™ C√¥ng Duy T√≠nh #shorts.mp4',
    quality_360p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/0a9126af-f394-42c5-acff-e7bd0e1da25c/hls/360p/playlist.m3u8',
    quality_480p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/0a9126af-f394-42c5-acff-e7bd0e1da25c/hls/480p/playlist.m3u8',
    quality_720p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/0a9126af-f394-42c5-acff-e7bd0e1da25c/hls/720p/playlist.m3u8'
  ),
  Upload.create!(
    id: '7c9faf8f-c371-4499-91d6-5968c384a4be',
    file_type: 'mp4',
    cdn_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/7c9faf8f-c371-4499-91d6-5968c384a4be/hls/master.m3u8',
    thumbnail_path: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/7c9faf8f-c371-4499-91d6-5968c384a4be/thumbnail.jpg',
    duration: 30,
    status: 'success',
    user_id: instructor.id,
    created_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    updated_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    formats: %w[mp4 hls],
    progress: 100,
    transcription: fetch_transcription_text('https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/7c9faf8f-c371-4499-91d6-5968c384a4be/transcription/transcript.json'),
    transcription_status: 'completed',
    processing_log: 'M·ªôt bi·ªát ƒë·ªôi ph·∫£n anh h√πng _b·∫•t th∆∞·ªùng_.mp4',
    quality_360p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/7c9faf8f-c371-4499-91d6-5968c384a4be/hls/360p/playlist.m3u8',
    quality_480p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/7c9faf8f-c371-4499-91d6-5968c384a4be/hls/480p/playlist.m3u8',
    quality_720p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/7c9faf8f-c371-4499-91d6-5968c384a4be/hls/720p/playlist.m3u8'
  ),
  Upload.create!(
    id: 'cc2fa2bb-7726-4f2c-9bff-a39773454702',
    file_type: 'mp4',
    cdn_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/cc2fa2bb-7726-4f2c-9bff-a39773454702/hls/master.m3u8',
    thumbnail_path: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/cc2fa2bb-7726-4f2c-9bff-a39773454702/thumbnail.jpg',
    duration: 24,
    status: 'success',
    user_id: instructor.id,
    created_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    updated_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    formats: %w[mp4 hls],
    progress: 100,
    transcription: fetch_transcription_text('https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/cc2fa2bb-7726-4f2c-9bff-a39773454702/transcription/transcript.json'),
    transcription_status: 'completed',
    processing_log: 'M·∫•t ch·∫•t lu√¥n üôÉ #takhongngu.mp4',
    quality_360p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/cc2fa2bb-7726-4f2c-9bff-a39773454702/hls/360p/playlist.m3u8',
    quality_480p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/cc2fa2bb-7726-4f2c-9bff-a39773454702/hls/480p/playlist.m3u8',
    quality_720p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/cc2fa2bb-7726-4f2c-9bff-a39773454702/hls/720p/playlist.m3u8'
  ),
  Upload.create!(
    id: 'eb44b289-3f1d-4ac3-8090-8849c779b5d4',
    file_type: 'mp4',
    cdn_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/eb44b289-3f1d-4ac3-8090-8849c779b5d4/hls/master.m3u8',
    thumbnail_path: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/eb44b289-3f1d-4ac3-8090-8849c779b5d4/thumbnail.jpg',
    duration: 12,
    status: 'success',
    user_id: instructor.id,
    created_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    updated_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
    formats: %w[mp4 hls],
    progress: 100,
    transcription: fetch_transcription_text('https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/eb44b289-3f1d-4ac3-8090-8849c779b5d4/transcription/transcript.json'),
    transcription_status: 'completed',
    processing_log: 'ƒë√©m ng∆∞·ª£c 10 gi√¢y.mp4',
    quality_360p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/eb44b289-3f1d-4ac3-8090-8849c779b5d4/hls/360p/playlist.m3u8',
    quality_480p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/eb44b289-3f1d-4ac3-8090-8849c779b5d4/hls/480p/playlist.m3u8',
    quality_720p_url: 'https://e-learning-s3s.s3.ap-southeast-2.amazonaws.com/uploads/eb44b289-3f1d-4ac3-8090-8849c779b5d4/hls/720p/playlist.m3u8'
  )
]

demo_videos = uploads.map(&:cdn_url)
course_thumbnails = uploads.map(&:thumbnail_path)

puts '‚úÖ Created uploads with matching content and thumbnails.'

course_titles = [
  'Data Analysis Mastery',
  'Advanced Excel Skills',
  'Business Law Fundamentals',
  'Agile Project Management',
  'Python Programming',
  'Web Development',
  'Digital Marketing',
  'Machine Learning',
  'UI/UX Design',
  'Project Management'
]

course_descriptions = [
  'Master data analysis techniques and tools.',
  'Learn advanced Excel techniques for business.',
  'Learn essential business law concepts.',
  'Master Agile methodologies and practices.',
  'Learn Python programming from scratch.',
  'Build modern web applications.',
  'Learn digital marketing strategies.',
  'Understand machine learning concepts.',
  'Create beautiful user interfaces.',
  'Master project management skills.'
]

categories = [category1, category2, category3, category4]
languages = %w[English Vietnamese Japanese]
prices = [299_000, 499_000, 999_000, 1_499_000, 1_999_000]

100.times do |i|
  title_index = rand(0..course_titles.length - 1)
  course = Course.create!(
    title: "#{course_titles[title_index]} #{i + 1}",
    description: course_descriptions[title_index],
    price: prices.sample,
    language: languages.sample,
    status: 'published',
    user_id: User.joins(:roles).where(roles: { name: 'instructor' }).sample.id,
    category_id: categories.sample.id,
    thumbnail_path: course_thumbnails.sample,
    demo_video_path: demo_videos.sample,
    is_free: rand < 0.1
  )

  CourseCategory.create!(
    course: course,
    category: Category.find(course.category_id)
  )

  (2..4).to_a.sample.times do |j|
    chapter = Chapter.create!(
      title: "Chapter #{j + 1}: #{course_titles[title_index]}",
      position: j + 1,
      course: course
    )

    (3..5).to_a.sample.times do |k|
      lesson = Lesson.create!(
        title: "Lesson #{k + 1}: #{course_descriptions[title_index]}",
        description: "Detailed lesson about #{course_titles[title_index]}",
        position: k + 1,
        chapter: chapter
      )

      (2..3).to_a.sample.times do |l|
        success_uploads = uploads.select { |upload| upload.status == 'success' }
        available_upload = success_uploads.any? ? success_uploads.sample : uploads.sample

        Video.create!(
          title: "Video #{l + 1}: #{lesson.title}",
          lesson: lesson,
          upload: available_upload,
          thumbnail: available_upload.thumbnail_path,
          position: l + 1,
          is_locked: rand < 0.4 ? Faker::Time.between(from: 6.months.ago, to: Time.current) : nil,
          moderation_status: %i[pending approved rejected locked].sample
        )
      end
    end
  end

  next unless rand < 0.7

  rand(1..5).times do
    student = User.joins(:roles).where(roles: { name: 'student' }).sample
    next if student.nil?
    next if student.enrollments.exists?(course_id: course.id)

    Enrollment.create!(
      user: student,
      course: course,
      status: %i[active pending].sample,
      payment_code: SecureRandom.hex(4).upcase,
      payment_method: Enrollment.payment_method.values.sample,
      amount: course.price,
      paid_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
      enrolled_at: Faker::Time.between(from: 6.months.ago, to: Time.current),
      completed_at: [nil, Faker::Time.between(from: 6.months.ago, to: Time.current)].sample,
      note: ['Completed payment successfully', 'Payment pending', nil].sample
    )
  end
end

puts '‚úÖ Created 100 courses with chapters, lessons, videos and enrollments.'

puts '‚úÖ Created course ratings!'

def create_quiz_for_course(course, is_exam = false)
  category = course.categories.first
  category_name = category ? category.name : 'Programming'

  if is_exam
    create_exam_for_course(course, category_name)
  else
    create_practice_quiz_for_course(course, category_name)
  end
end

def create_practice_quiz_for_course(course, category_name)
  topics = QUIZ_TOPICS[category_name]
  question_templates = QUESTION_TEMPLATES[category_name]
  answers = ANSWER_OPTIONS[category_name]
  topic = topics.sample
  title = "#{topic} - #{course.title.split.first(2).join(' ')}"

  start_time = Time.current + 5.minutes
  end_time = start_time + 1.hour

  quiz = Quiz.create!(
    title: title,
    is_exam: false,
    time_limit: [10, 15, 20, 25, 30].sample,
    course: course,
    start_time: start_time,
    end_time: end_time
  )

  rand(5..10).times do |j|
    template = question_templates.sample
    content = template.gsub('TOPIC', topic.downcase) + " (##{j + 1})"

    question = Question.create!(
      content: content,
      options: answers.shuffle.each_with_index.map { |v, i| [i.to_s, v] }.to_h,
      correct_option: rand(0..3),
      explanation: "Gi·∫£i th√≠ch chi ti·∫øt: #{answers.sample} l√† ph∆∞∆°ng ph√°p hi·ªáu qu·∫£ nh·∫•t cho #{topic.downcase}.",
      difficulty: %w[easy medium hard].sample,
      course: course,
      user: course.user,
      topic: %w[math physics chemistry biology history geography literature programming].sample,
      learning_goal: %w[remember understand apply analyze create].sample
    )

    QuizQuestion.create!(quiz: quiz, question: question)
  end

  create_quiz_attempts(quiz, course)

  quiz
end

def create_exam_for_course(course, category_name)
  start_time = Time.current + 5.minutes
  end_time = start_time + 2.hours

  exam = Quiz.create!(
    title: "B√†i thi cu·ªëi kh√≥a - #{course.title.truncate(30)}",
    is_exam: true,
    time_limit: [30, 45, 60].sample,
    course: course,
    start_time: start_time,
    end_time: end_time
  )

  exam_templates = EXAM_QUESTIONS[category_name] || EXAM_QUESTIONS['Programming']

  rand(15..20).times do |_j|
    template = exam_templates.sample

    subject = template[:content_subjects].sample
    task = template[:content_tasks].sample
    content = "#{template[:content_prefix]}#{subject}#{template[:content_suffix]}#{task}?"

    question = Question.create!(
      content: content,
      options: template[:options].shuffle.each_with_index.map { |v, i| [i.to_s, v] }.to_h,
      correct_option: rand(0..3),
      explanation: "L√Ω gi·∫£i chi ti·∫øt: #{template[:options].sample} l√† ph∆∞∆°ng ph√°p t·ªëi ∆∞u cho nhi·ªÅu tr∆∞·ªùng h·ª£p.",
      difficulty: %w[medium hard].sample,
      course: course,
      user: course.user,
      topic: %w[math physics chemistry biology history geography literature programming].sample,
      learning_goal: %w[remember understand apply analyze create].sample
    )

    QuizQuestion.create!(quiz: exam, question: question)
  end

  exam
end

def create_quiz_attempts(quiz, course)
  return unless course.enrolled_users.any? && rand < 0.8

  students = course.enrolled_users.sample(rand(1..5))

  students.each do |student|
    answers = {}
    correct_count = 0

    quiz.questions.each do |q|
      user_answer = rand(0..3)
      answers[q.id.to_s] = user_answer
      correct_count += 1 if user_answer == q.correct_option
    end

    score = quiz.questions.any? ? (correct_count.to_f / quiz.questions.count * 10).round : 0

    time_spent = rand((quiz.time_limit * 30)..(quiz.time_limit * 60))

    QuizAttempt.create!(
      quiz: quiz,
      user: student,
      score: score,
      time_spent: time_spent,
      answers: answers
    )
  end
end

QUIZ_TOPICS = {
  'Programming' => [
    'C∆° b·∫£n v·ªÅ ng√¥n ng·ªØ l·∫≠p tr√¨nh', 'C·∫•u tr√∫c d·ªØ li·ªáu v√† thu·∫≠t to√°n',
    'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng', 'Framework v√† th∆∞ vi·ªán', 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng web'
  ],
  'Design' => [
    'Nguy√™n t·∫Øc thi·∫øt k·∫ø c∆° b·∫£n', 'M√†u s·∫Øc v√† b·ªë c·ª•c',
    'UX/UI Design', 'Thi·∫øt k·∫ø ƒë√°p ·ª©ng', 'C√¥ng c·ª• thi·∫øt k·∫ø chuy√™n nghi·ªáp'
  ],
  'Business' => [
    'Qu·∫£n l√Ω d·ª± √°n', 'Marketing v√† b√°n h√†ng',
    'T√†i ch√≠nh c∆° b·∫£n', 'Chi·∫øn l∆∞·ª£c kinh doanh', 'Qu·∫£n l√Ω nh√¢n s·ª±'
  ],
  'Data Analysis' => [
    'Ph√¢n t√≠ch d·ªØ li·ªáu c∆° b·∫£n', 'Th·ªëng k√™ ·ª©ng d·ª•ng',
    'Tr·ª±c quan h√≥a d·ªØ li·ªáu', 'Machine Learning c∆° b·∫£n', 'C√¥ng c·ª• ph√¢n t√≠ch d·ªØ li·ªáu'
  ]
}.freeze

QUESTION_TEMPLATES = {
  'Programming' => [
    'Ph∆∞∆°ng ph√°p n√†o ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·ªëi ∆∞u h√≥a TOPIC?',
    'Nguy√™n t·∫Øc quan tr·ªçng nh·∫•t trong TOPIC l√† g√¨?',
    'C√¥ng c·ª• n√†o ph·ªï bi·∫øn nh·∫•t ƒë·ªÉ ph√°t tri·ªÉn TOPIC?',
    'C√°ch gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ TOPIC hi·ªáu qu·∫£ nh·∫•t?'
  ],
  'Design' => [
    'Nguy√™n t·∫Øc thi·∫øt k·∫ø n√†o quan tr·ªçng nh·∫•t trong TOPIC?',
    'Xu h∆∞·ªõng m·ªõi nh·∫•t trong lƒ©nh v·ª±c TOPIC?',
    'C√¥ng c·ª• n√†o t·ªët nh·∫•t cho TOPIC?',
    'C√°ch √°p d·ª•ng TOPIC v√†o d·ª± √°n th·ª±c t·∫ø?'
  ],
  'Business' => [
    'Chi·∫øn l∆∞·ª£c TOPIC n√†o hi·ªáu qu·∫£ nh·∫•t cho startup?',
    'Y·∫øu t·ªë quy·∫øt ƒë·ªãnh th√†nh c√¥ng trong TOPIC?',
    'Ph∆∞∆°ng ph√°p ƒëo l∆∞·ªùng hi·ªáu qu·∫£ c·ªßa TOPIC?',
    'Xu h∆∞·ªõng m·ªõi trong TOPIC nƒÉm nay?'
  ],
  'Data Analysis' => [
    'K·ªπ thu·∫≠t n√†o t·ªët nh·∫•t cho TOPIC?',
    'C√¥ng c·ª• ph√¢n t√≠ch n√†o ph√π h·ª£p nh·∫•t v·ªõi TOPIC?',
    'C√°ch x·ª≠ l√Ω missing data trong TOPIC?',
    'M√¥ h√¨nh n√†o cho ƒë·ªô ch√≠nh x√°c cao nh·∫•t trong TOPIC?'
  ]
}.freeze

ANSWER_OPTIONS = {
  'Programming' => [
    'S·ª≠ d·ª•ng thu·∫≠t to√°n t·ªëi ∆∞u h√≥a v√† c·∫•u tr√∫c d·ªØ li·ªáu ph√π h·ª£p',
    '√Åp d·ª•ng m·∫´u thi·∫øt k·∫ø v√† ki·∫øn tr√∫c ph√¢n l·ªõp',
    'S·ª≠ d·ª•ng c√°c th∆∞ vi·ªán v√† framework hi·ªán ƒë·∫°i',
    '√Åp d·ª•ng c√°c k·ªπ thu·∫≠t l·∫≠p tr√¨nh song song'
  ],
  'Design' => [
    'S·ª≠ d·ª•ng nguy√™n t·∫Øc thi·∫øt k·∫ø t·ªëi gi·∫£n v√† t∆∞∆°ng ph·∫£n',
    '√Åp d·ª•ng l√Ω thuy·∫øt m√†u s·∫Øc v√† b·ªë c·ª•c c√¢n ƒë·ªëi',
    'T·ªëi ∆∞u h√≥a tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† kh·∫£ nƒÉng ti·∫øp c·∫≠n',
    'Thi·∫øt k·∫ø d·ª±a tr√™n nghi√™n c·ª©u ng∆∞·ªùi d√πng v√† ph·∫£n h·ªìi'
  ],
  'Business' => [
    'Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† ƒë·ªëi th·ªß c·∫°nh tranh',
    'X√¢y d·ª±ng k·∫ø ho·∫°ch kinh doanh v√† chi·∫øn l∆∞·ª£c marketing',
    'T·ªëi ∆∞u h√≥a quy tr√¨nh v√† ngu·ªìn l·ª±c',
    '√Åp d·ª•ng c√°c m√¥ h√¨nh kinh doanh ƒë·ªïi m·ªõi'
  ],
  'Data Analysis' => [
    '√Åp d·ª•ng ph∆∞∆°ng ph√°p th·ªëng k√™ v√† m√¥ h√¨nh d·ª± ƒëo√°n',
    'S·ª≠ d·ª•ng c√¥ng c·ª• ph√¢n t√≠ch d·ªØ li·ªáu v√† tr·ª±c quan h√≥a',
    'X·ª≠ l√Ω d·ªØ li·ªáu l·ªõn v√† ph√¢n t√≠ch theo th·ªùi gian th·ª±c',
    'K·∫øt h·ª£p nhi·ªÅu ngu·ªìn d·ªØ li·ªáu v√† k·ªπ thu·∫≠t ph√¢n t√≠ch'
  ]
}.freeze

EXAM_QUESTIONS = {
  'Programming' => [
    {
      content_prefix: 'V·ªõi ng√¥n ng·ªØ l·∫≠p tr√¨nh ',
      content_subjects: ['Python', 'JavaScript', 'Java', 'C++', 'Ruby'],
      content_suffix: ', ƒë√¢u l√† c√°ch t·ªët nh·∫•t ƒë·ªÉ ',
      content_tasks: ['x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô', 't·ªëi ∆∞u h√≥a hi·ªáu su·∫•t', 'tri·ªÉn khai m√¥ h√¨nh MVC', 'qu·∫£n l√Ω b·ªô nh·ªõ'],
      options: [
        'S·ª≠ d·ª•ng Promise v√† async/await ƒë·ªÉ qu·∫£n l√Ω lu·ªìng x·ª≠ l√Ω',
        '√Åp d·ª•ng ƒëa lu·ªìng v√† x·ª≠ l√Ω song song khi th√≠ch h·ª£p',
        'T·∫≠n d·ª•ng c√°c th∆∞ vi·ªán chuy√™n d·ª•ng v√† framework t·ªëi ∆∞u',
        'S·ª≠ d·ª•ng m·∫´u thi·∫øt k·∫ø Singleton ƒë·ªÉ qu·∫£n l√Ω t√†i nguy√™n'
      ]
    }
  ],
  'Design' => [
    {
      content_prefix: 'Trong lƒ©nh v·ª±c ',
      content_subjects: ['UI/UX Design', 'Web Design', 'Mobile Design', 'Graphic Design'],
      content_suffix: ', l√†m th·∫ø n√†o ƒë·ªÉ ',
      content_tasks: ['t·∫°o tr·∫£i nghi·ªám ng∆∞·ªùi d√πng t·ªët nh·∫•t', 'thi·∫øt k·∫ø giao di·ªán hi·ªáu qu·∫£',
                      '√°p d·ª•ng nguy√™n t·∫Øc accessibility', 'c√¢n b·∫±ng th·∫©m m·ªπ v√† ch·ª©c nƒÉng'],
      options: [
        '√Åp d·ª•ng nguy√™n t·∫Øc thi·∫øt k·∫ø t·ªëi gi·∫£n v√† nh·∫•t qu√°n',
        'S·ª≠ d·ª•ng prototyping v√† testing v·ªõi ng∆∞·ªùi d√πng th·∫≠t',
        'Tu√¢n th·ªß c√°c h∆∞·ªõng d·∫´n thi·∫øt k·∫ø c·ªßa n·ªÅn t·∫£ng',
        'T·∫≠p trung v√†o tr·∫£i nghi·ªám ng∆∞·ªùi d√πng v√† kh·∫£ nƒÉng s·ª≠ d·ª•ng'
      ]
    }
  ],
  'Business' => [
    {
      content_prefix: 'Trong ph√°t tri·ªÉn chi·∫øn l∆∞·ª£c ',
      content_subjects: ['marketing', 'kinh doanh', 'qu·∫£n l√Ω nh√¢n s·ª±', 't√†i ch√≠nh'],
      content_suffix: ', y·∫øu t·ªë n√†o quan tr·ªçng nh·∫•t ƒë·ªÉ ',
      content_tasks: ['tƒÉng doanh thu', 'gi·∫£m chi ph√≠', 't·ªëi ∆∞u h√≥a quy tr√¨nh', 'n√¢ng cao hi·ªáu su·∫•t'],
      options: [
        'Ph√¢n t√≠ch d·ªØ li·ªáu v√† KPI ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh d·ª±a tr√™n s·ªë li·ªáu',
        'X√¢y d·ª±ng ƒë·ªôi ng≈© chuy√™n nghi·ªáp v√† vƒÉn h√≥a c√¥ng ty m·∫°nh m·∫Ω',
        '√Åp d·ª•ng c√°c chi·∫øn l∆∞·ª£c ƒë·ªïi m·ªõi v√† ph∆∞∆°ng ph√°p ti·∫øp c·∫≠n m·ªõi',
        'T·ªëi ∆∞u h√≥a quy tr√¨nh v√† t·ª± ƒë·ªông h√≥a c√°c nhi·ªám v·ª• l·∫∑p l·∫°i'
      ]
    }
  ],
  'Data Analysis' => [
    {
      content_prefix: 'Trong ph√¢n t√≠ch d·ªØ li·ªáu ',
      content_subjects: ['l·ªõn', 'th·ªùi gian th·ª±c', 'd·ª± ƒëo√°n', 'h√†nh vi ng∆∞·ªùi d√πng'],
      content_suffix: ', ph∆∞∆°ng ph√°p n√†o hi·ªáu qu·∫£ nh·∫•t ƒë·ªÉ ',
      content_tasks: ['x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu', 'tr·ª±c quan h√≥a k·∫øt qu·∫£', 'd·ª± ƒëo√°n xu h∆∞·ªõng', 'ph√°t hi·ªán b·∫•t th∆∞·ªùng'],
      options: [
        'S·ª≠ d·ª•ng thu·∫≠t to√°n h·ªçc m√°y v√† ph√¢n t√≠ch d·ª± ƒëo√°n',
        '√Åp d·ª•ng th·ªëng k√™ n√¢ng cao v√† ph√¢n t√≠ch h·ªìi quy',
        'K·∫øt h·ª£p nhi·ªÅu ngu·ªìn d·ªØ li·ªáu v√† ph∆∞∆°ng ph√°p ph√¢n t√≠ch',
        'S·ª≠ d·ª•ng c√¥ng c·ª• tr·ª±c quan h√≥a v√† dashboard t∆∞∆°ng t√°c'
      ]
    }
  ]
}.freeze

puts 'ƒêang t·∫°o b√†i ki·ªÉm tra cho c√°c kh√≥a h·ªçc'

Course.find_each do |course|
  rand(5..8).times do
    create_quiz_for_course(course, false)
  end

  rand(2..3).times do
    create_quiz_for_course(course, true)
  end
end

puts "‚úÖ ƒê√£ t·∫°o #{Quiz.count} b√†i ki·ªÉm tra v·ªõi #{Question.count} c√¢u h·ªèi v√† #{QuizAttempt.count} l·∫ßn l√†m b√†i."

User.joins(:roles).where(roles: { name: 'student' }).each do |student|
  student.enrollments.sample(rand(1..3)).each do |enrollment|
    random_lesson = enrollment.course.chapters.sample&.lessons&.sample
    next unless random_lesson

    Progress.create!(
      user: student,
      course: enrollment.course,
      lesson: random_lesson,
      status: %i[pending inprogress done].sample
    )
  end
end

puts '‚úÖ Created progress records.'

Course.find_each do |course|
  random_rating = rand(3.0..5.0).round(2)
  course.update!(rating: random_rating)
end

puts '‚úÖ Created course ratings!'

puts 'Seeding quiz attempts...'

users = User.all
quizzes = Quiz.all

device_infos = [
  'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
  'Mozilla/5.0 (iPhone; CPU iPhone OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1',
  'Mozilla/5.0 (iPad; CPU OS 16_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.0 Mobile/15E148 Safari/604.1',
  'Mozilla/5.0 (Android 13; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Mobile Safari/537.36'
]

client_ips = [
  '::1',
  '118.69.55.83',
  '192.168.1.1',
  '10.0.0.1',
  '172.16.0.1',
  '127.0.0.1'
]

users.each do |user|
  quizzes.each do |quiz|
    start_time = Time.current - rand(1..24).hours
    completed_at = start_time + rand(10..30).minutes
    time_spent = (completed_at - start_time).to_i

    log_actions = []
    current_time = start_time

    used_devices = Set.new
    used_ips = Set.new

    while current_time < completed_at
      device_info = device_infos.sample
      client_ip = client_ips.sample

      used_devices.add(device_info)
      used_ips.add(client_ip)

      log_actions << {
        client_ip: client_ip,
        timestamp: current_time.iso8601(3),
        device_info: device_info
      }
      current_time += rand(30..180).seconds
    end

    final_device = device_infos.sample
    final_ip = client_ips.sample
    used_devices.add(final_device)
    used_ips.add(final_ip)

    log_actions << {
      client_ip: final_ip,
      timestamp: completed_at.iso8601(3),
      device_info: final_device
    }

    QuizAttempt.create!(
      user: user,
      quiz: quiz,
      score: rand(5..10),
      time_spent: time_spent,
      start_time: start_time,
      completed_at: completed_at,
      tab_switch_count: rand(0..3),
      copy_paste_count: rand(0..2),
      screenshot_count: rand(0..1),
      right_click_count: rand(0..2),
      devtools_open_count: rand(0..1),
      other_unusual_actions: rand(0..2),
      device_count: used_devices.size,
      log_actions: log_actions
    )
  end
end

puts '‚úÖ Created quiz attempts!'
puts "\nüéâ Seed data completed successfully!"
