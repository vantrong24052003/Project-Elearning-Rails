# Comprehensive Rules

## 1. Communication Principles
- Use Vietnamese in all situations:
  - All answers, explanations, and analyses must be written in Vietnamese.
  - Comments in the code must also use English for better understanding and limit commenting again.
  - Use clear language, avoid mechanical translations from English to Vietnamese.
  - For technical terms without Vietnamese equivalents, the original term can be kept with a brief explanation if needed.

## 2. Analysis Process
- Comprehensive Approach:
  - Always thoroughly analyze all aspects of the problem before providing solutions.
  - Clearly define functional and non-functional requirements.
  - Assess alternative solutions before deciding.
  - Consider the impact of solutions on performance, security, and user experience.
- Research Methodology:
  - Study the current codebase thoroughly to understand its structure and logic.
  - Analyze in detail the attributes, data relationships, and related business logic.
  - Identify design patterns being utilized in the project.
  - Review libraries and frameworks in use to ensure consistency.

## 3. Principles for Respecting Existing Code
- Maintain Consistency:
  - Do not delete or modify code without clear instructions.
  - Maintain the current coding style of the project.
  - Follow established naming conventions and structures.
  - Do not change existing logic or processing flow unless explicitly requested.
- Dependency Management:
  - Do not arbitrarily add new libraries unless absolutely necessary.
  - Prioritize using libraries already present in the project.
  - When new dependencies are needed, propose and explain the reasons.
  - Always check and resolve all linter and data type errors after code generation to ensure the code is error-free.

## 4. UI/UX Design
- Modern Design Philosophy:
  - Create intuitive, user-friendly, and easy-to-use interfaces.
  - Ensure consistency throughout the application.
  - Favor minimalist design while maintaining full functionality.
  - Follow Material Design principles or other applicable design philosophies.

- Color Palette and Aesthetics:
  - Use a dark color scheme as the primary theme, with colors such as:
    - Background: bg-gray-800, bg-gray-900
    - Text: text-gray-200, text-gray-300
  - Ensure appropriate contrast for readability.
  - Apply subtle shadow and depth effects.
  - Avoid excessively bright or flashy colors.

- UI Components:
  - Use simple, easy-to-understand, and consistent UI elements.
  - Ensure UI elements are large enough for easy interaction on touch devices.

- Responsive and Adaptive:
  - Design interfaces with the ability to adapt to different screen sizes.
  - Ensure a consistent user experience on both phones and tablets.
  - Use relative units (% or rem) instead of fixed units.

## 5. Frontend Folder Structure
- Stimulus controllers are placed in the frontend/javascript/controllers directory.
  - Controllers related to client UI are located in controllers/dashboard/ or views/dashboard/.
  - Controllers related to admin UI are located in controllers/manage/ or views/manage/.
- When creating a new Stimulus controller, it must be imported into the index.js file in the controllers directory.
- For files under *50 lines* used in only 1-2 places, do not create a separate file.
Maintain clean code but avoid "over-cleaning". Only split files when:

  - The file has *50+ lines*.
  - It is used in *multiple places* within the project.

## 6. Technology Stack
- *Backend*: Rails 8.
- *Frontend*: Stimulus, Turbo, TailwindCSS.
- *Project Theme*: E-learning.
  - *Instructor*: Upload videos, create accounts, manage students, courses, chapters, and lessons for themselves.
  - *Student*: View courses, purchase courses.
  - *Admin*: Manage and approve courses, verify content suitability.

## 7. API Integration and Management
- API Service Architecture:
  - Create and maintain separate API services for each function or module.
  - Apply appropriate design patterns (Repository, Factory, Singleton, etc.).
  - Clearly separate data processing logic from display logic.

- Request and Response Handling:
  - Handle all states thoroughly: loading, success, error, empty.
  - Apply appropriate retry mechanisms for unstable requests.
  - Implement data caching reasonably to minimize the number of requests.
  - Handle errors gracefully and notify users when necessary.

- Security and Performance:
  - Follow security principles when working with APIs.
  - Optimize payload sizes to improve performance.
  - Use authentication methods that meet backend requirements.
  - Implement cancellation tokens for unnecessary requests.

## 8. State Management and Data Flow
- Effective State Management:
  - Use state management solutions suitable for the project without relying on complex libraries.
  - Avoid storing duplicate states.
  - Normalize data for easy access and updates.
  - Use simple and clear handling techniques to avoid side effects.

- Render Optimization:
  - Avoid unnecessary rendering by validating display logic.
  - Break down components to minimize unnecessary re-rendering.

## 9. Self-Testing Process
- *Logic*: Carefully compare with the initial request.
- *Frontend*: Make sure the UI is compatible and fits the design (background color bg-gray-800, bg-gray-900). Write in darkmode, if the UI is dark then use background color bg-gray-800, bg-gray-900 and if the UI is light then use background color bg-white and text-black.

## 10. Documentation and Knowledge Management
- Create Markdown documentation for each module in the docs/ directory.
Documentation content includes:

  - A description of the problem or challenge.
  - Considered solutions and reasons for the chosen one.
  - Sample code or illustrative diagrams.

## 11. Final Summary
- *Hi, boss Trọng*: Always greet before writing code or solutions.
- *Self-Test*: Ensure thorough self-testing before submitting.

## 12. Ruby Style Guide Conventions
- Prioritize writing concise, understandable, and natural Ruby code
- For example, use `if something` instead of `unless !something`
- Follow consistent variable and method naming conventions
- Use 2 spaces for indentation, no tabs

## 13. Understand the Model before writing code
- **Read the relevant model file carefully:**
- Check relationships: `has_many`, `belongs_to`, `has_one`, `has_and_belongs_to_many`
- Look at validations, enums, default_scope, callbacks
- Check predefined methods
- Check delegates, aliases, or other macros

- **Use the right relationships:**
- For example: If `Lesson` has `belongs_to :chapter`, no need to rewrite `chapter_id`, just `lesson.chapter`
- Understand the relationships between tables
- Visualize the ERD in your head or use the `rails-erd` gem to get an overview

- **Avoid redundant queries:**
- Avoid using `.where(...)` when there is already a relationship
- Avoid creating additional tables if there is a join table

- **Check callbacks and scopes carefully:**
- Avoid overriding `before_save`, `after_create`, `default_scope` if not necessary
- Use existing scopes when possible
- For example: `Course.published`, `Student.active` instead of `.where(published: true)`

- **Reuse methods and helpers:**
- Don't "reinvent" a method if it is already in a model or helper
- If logic is duplicated in multiple controllers, put it in a concern or service

- **Start from logic already in the model:**

- If model-related work, write test cases first, then controller/service

- **Be careful when adding new fields:**

- Check `db/schema.rb` or `structure.sql` first
- Verify the field is really needed or has an alternative

## 14. Use the right HTTP status codes
- **200 OK:** The request was successful and there was a return content (usually used for successful GET, POST)

- **201 Created:** The new resource was created successfully (usually used for POST to create a new object)

- **204 No Content:** The request was successful but there was no return content (usually used for successful DELETE, PUT)

- **400 Bad Request:** The request is invalid or missing necessary information

- **401 Unauthorized:** The request requires authentication and the user is not logged in or does not have access rights

- **403 Forbidden:** The user does not have permission to perform the action this, even if authenticated

- **404 Not Found:** The resource does not exist or was not found

- **405 Method Not Allowed:** The HTTP method is not allowed on this resource (e.g., using GET instead of POST)

- **409 Conflict:** The request conflicts with the current state of the resource (commonly seen in new creations or updates)

- **422 Unprocessable Entity:** The submitted data could not be processed (commonly seen in cases of failed validation)

- **500 Internal Server Error:** The server error and request could not be processed due to a system problem

## 15. Message
- All alert and notice messages are in English.

## 16. symbol
- Prefer using symbols over strings.

## 17. class và module
- In controllers, use class User:: rather than module User.

## 18. routes.
-Before writing anything related to permissions, you should check the routes again.
course_viewewer
## 19. Handle only UI-related issues in stimulus, do not call APIs.
- In the stimulus, only handle matters related to user interface (UI) functionality. Avoid making any API calls within the stimulus controller.

## 20. Write views directly if they are related, do not separate files.
- If multiple elements in a view are related, write them directly within the same file. For example, if using turbo in a viewer, write the turbo-related code directly in the viewer file rather than separating it into another file
